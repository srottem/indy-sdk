using Hyperledger.Indy.CryptoApi;
using Hyperledger.Indy.WalletApi;
using Microsoft.VisualStudio.TestTools.UnitTesting;
using System.Linq;
using System.Threading.Tasks;

namespace Hyperledger.Indy.Test.CryptoTests
{
    [TestClass]
    public class BoxSealOpenTest : IndyIntegrationTestWithPoolAndSingleWallet
    {
        [TestMethod]
        public async Task TestBoxSealOpenWorks()
        {
            var verkey = await Crypto.CreateKeyAsync(wallet, MY1_IDENTITY_KEY_JSON);

            var encryptedMessage = await Crypto.BoxSealAsync(verkey, MESSAGE);
            var decryptedMessage = await Crypto.BoxSealOpenAsync(wallet, verkey, encryptedMessage);

            Assert.IsTrue(MESSAGE.SequenceEqual(decryptedMessage));
        }

        [TestMethod]
        public async Task TestBoxSealOpenWorksForOtherKey()
        {
            var verkey = await Crypto.CreateKeyAsync(wallet, MY1_IDENTITY_KEY_JSON);
            var encryptedMessage = await Crypto.BoxSealAsync(VERKEY_TRUSTEE, MESSAGE);

            var ex = await Assert.ThrowsExceptionAsync<InvalidStructureException>(() =>
                Crypto.BoxSealOpenAsync(wallet, verkey, encryptedMessage)
           );
        }

        [TestMethod]
        public async Task TestBoxSealOpenWorksForUnknownKey()
        {
            var encryptedMessage = await Crypto.BoxSealAsync(VERKEY_MY1, MESSAGE);

            var ex = await Assert.ThrowsExceptionAsync<WalletValueNotFoundException>(() =>
                Crypto.BoxSealOpenAsync(wallet, VERKEY_MY1, encryptedMessage)
           );
        }
       
    }
}
