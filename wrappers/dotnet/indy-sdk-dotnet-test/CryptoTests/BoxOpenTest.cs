using Hyperledger.Indy.CryptoApi;
using Hyperledger.Indy.WalletApi;
using Microsoft.VisualStudio.TestTools.UnitTesting;
using System;
using System.Linq;
using System.Threading.Tasks;

namespace Hyperledger.Indy.Test.CryptoTests
{
    [TestClass]
    public class BoxOpenTest : IndyIntegrationTestWithPoolAndSingleWallet
    {
        [TestMethod]
        public async Task TestBoxOpenWorks()
        {
            var myVk = await Crypto.CreateKeyAsync(wallet, MY1_IDENTITY_KEY_JSON);

            var decryptedMessage = await Crypto.BoxOpenAsync(wallet, myVk, VERKEY_TRUSTEE, ENCRYPTED_MESSAGE, NONCE);
            Assert.IsTrue(MESSAGE.SequenceEqual(decryptedMessage)); 
        }

        [TestMethod]
        public async Task TestBoxOpenWorksForUnknownMyKey()
        {
            var ex = await Assert.ThrowsExceptionAsync<WalletValueNotFoundException>(() =>
                Crypto.BoxOpenAsync(wallet, VERKEY_MY1, VERKEY_TRUSTEE, ENCRYPTED_MESSAGE, NONCE)
           );
        }

        [TestMethod]
        public async Task TestBoxOpenWorksForOtherCoder()
        {
            var myVk = await Crypto.CreateKeyAsync(wallet, MY1_IDENTITY_KEY_JSON);

            var ex = await Assert.ThrowsExceptionAsync<InvalidStructureException>(() =>
                Crypto.BoxOpenAsync(wallet, myVk, VERKEY_MY2, ENCRYPTED_MESSAGE, NONCE)
           );
        }

        [TestMethod]
        public async Task TestBoxOpenWorksForNonceNotCorrespondMessage()
        {
            var nonce = (byte[])(Array)new sbyte[] { 46, 33, -4, 67, 1, 44, 57, -46, -91, 87, 14, 41, -39, 48, 42, -126, -121, 84, -58, 59, -27, 51, -32, -23};
            var myVk = await Crypto.CreateKeyAsync(wallet, MY1_IDENTITY_KEY_JSON);

            var ex = await Assert.ThrowsExceptionAsync<InvalidStructureException>(() =>
                Crypto.BoxOpenAsync(wallet, myVk, VERKEY_TRUSTEE, ENCRYPTED_MESSAGE, nonce)
           );
        }
    }
}
